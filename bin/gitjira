#!/usr/bin/env python

#################################################################################
#
#    Copyright 2013 Jairam Chandar
#  
#    This file is part of GitJira.
#
#    GitJira is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    GitJira is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with GitJira.  If not, see <http://www.gnu.org/licenses/>.
#
#################################################################################

import sys, os, getpass

from optparse import OptionParser

import gitjira

from gitjira.jira import Jira
from gitjira.conf import Configuration


def main(args):
    opts = parse_cli(args)

    conf = Configuration.read(opts.config) if os.path.exists(opts.config) else\
           interactive_config(opts.config)

    jira = Jira(conf)
    if opts.create_branch:
        gitjira.createBranch(opts.create_branch, jira, opts.transition)

    if opts.commit_branch:
        gitjira.commitBranch(jira)

    return 0


def parse_cli(args):
	parser = OptionParser(
			usage="%prog [options]",
			description=__doc__)
	add = parser.add_option

	add('-b', '--create-branch', metavar='TICKET',
		help='Create a new branch for the specified Jira ticker')
	add('-c', '--commit-branch', action='store_true',
		help='Commit pending changes')
	add('--config', default=default_config_file(),
		help='Specify a configuration file')
	add('-n', '--no-transition', action='store_false', dest='transition',
		default=True, help='Do not transition the ticket' )

	opts, args = parser.parse_args(args[1:])

	if args:
		parser.error("Trailing arguments")

	if not (opts.commit_branch or opts.create_branch):
		parser.error("You have to specify at least one command")

	return opts


def default_config_file():
	xdg = os.getenv('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
	return os.path.join(xdg, 'gitjira.conf')


def interactive_config(filename):
	username = read("Username:", non_empty("Username"))
	password = read("Password:", non_empty("Password"), reader=getpass.getpass)
	base_url = read("Jira base URL (e.g. https://jira.atlassian.net):", non_empty("URL"))
	conf = Configuration(userhash=gitjira.createUserHash(username, password), base_url=base_url)

	if not os.path.isdir(os.path.dirname(filename)):
		os.makedirs(os.path.dirname(filename))
	conf.write(filename)

	return conf


def read(prompt, postprocessor=lambda x: x, reader=raw_input):
	return postprocessor(reader(prompt + ' '))

def non_empty(field):
	def fun(x):
		if x.strip(): return x.strip()
		raise ValueError("%s cannot be empty" % field)
	return fun


if __name__ == '__main__':
	sys.exit(main(sys.argv))

